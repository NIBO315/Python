					pandas知识点总结
使用pandas的目的:
	用于处理numpy无法处理的字符串、时间序列等非数值型数据,是numpy工具的一部分,和numpy的一些操作相同

pandas常用的数据类型:
	1.Series - 一维,带标签数组
	2.DataFrame - 二维,Series容器

pandas之Series常用操作:
	1.获取值类型: pd.type
	2.改变值类型: pd.astype(float)
	3.布尔索引: t[t>4] - 取t中大于4的所有值
	
pandas之Series数组的创建:
	1.普通创建:pd.Series([1, 2, 3, 4 ,5],index=list("abcde"))
	2.通过字典创建:
		key变为索引,value变为内容值
		temp_dict = {"name": "xiaoming", "age": 20, "tel":10086}
		pd.Series(temp_dict)
	3.string.ascii_uppercase[i]:i for i in range(10) - 表示取A-J为索引,0-9为值

pandas之Series的切片和索引:
	1.Serues数组切片的相关知识:		
		例:	
	  	  temp_dict = {"name": "xiaoming", "age": 20, "tel": 10086}
	  	  t = pd.Series(temp_dict)
	
		取单值: 数组名[索引号]
		取连续值: 数组名[:索引号]
		取不连续值: 数值名[[索引号, 索引号]] 或 数值名[["key名","key名"]]

	2.Series数组索引的相关知识:
		取索引方法: 
			t.index - 取出数组所有索引,可迭代
			list(t.index)[:2] - 取出前2个索引
		取值方法: t.values - 类型为numpy.ndarray,可按照numpy的方法进行计算
		where方法: a.where(a > 1, 10) - 表示小于1的替换成10,大于1的不变化

pandas读取本地数据:
	pd.read_csv("frame") - 读取csv文件
	pd.read_sql(sql_sentence, connection) - 读取数据库文件

pandas之DataFrame数组的创建:
	1.普通创建: pd.DataFrame(np.arange(12).reshape((3, 4)))
	2.指定索引创建: pd.DataFrame(np.arange(12).reshape((3, 4)), index=list("abc"), columns=list("wxyz"))
	3.字典创建: 
		d1 = {"name": ["xiaoming", "xiaohong"], "age": [20,23], "tel": [10086, 10010]}
		pd.DataFrame(d1)
		
		d2 = [{"name": "xiaoming", "age":20, "tel": 10086}, {"name": "xiaohong","age": 23}, {"name":"xiaoni", "tel": 10010}]
		pd.DataFrame(d2)

pandas之DataFrame的基本属性:
	1.df.index - 显示行索引的基本信息
	2.df.columns - 显示列索引的基本信息
	3.df.dtypes - 显示每列值的数据类型
	4.df.values - 显示值的内容
	5.df.ndim - 显示维度
	6.df.shape - 显示形状
	7.df.sort_values(by="输入按照什么进行排序", ascending=True) - 对数据进行排序,ascending默认为升序

pandas之DataFrame整体情况查询:
	1.df.head(3) - 显示头部几行,默认为5行
	2.df.tail(3) - 显示尾部几行,默认为5行
	3.df.info() - 展示df的相关信息概览:行数,列数,列索引,列非空值个数,列类型,内存占用
	4.df.describe() - 快速统计综合结果:计数,均值,标准差,最大值,四分位数,最小值
		
pandas之DataFrame切片和索引:
	1.取行和取列(方括号内写数字表示取行,对行进行操作;写字符串表示取列索引,对列进行操作)
    		df[:20] - 取前20行
    		df["Row_Labels"] - 取列索引名为Row_Labels的列

    	2.pandas之loc:
    		df.loc["a", "z"] - 通过标签索引行数据,取a行z列,可以进行赋值
    		df.iloc[:, [1, 2]] - 通过位置获取行数据,取第1,2列,可以进行赋值
	
	3.pandas之布尔索引:
		df[(df["Row_Labels"].str.len() > 4) & (df["Count_AnimalName"] > 700)]

pandas之DataFrame缺失数据的处理:
	例:		w  x  y  z
		t = 0   2  3  4  5
		    1  NaN 0  3  4
		    2  NaN 2  0 NaN
	缺失值通常有两种情况:NaN 和 0
	判断数据是否为NaN:
		1.pd.isnull(t)
		2.pd.notnull(t)
	处理NaN方式:
		1.删除: 
			t.dropna(axis=0/1, how="any/all") - how默认为any,只要有nan就删除该行和列,为all时表示一行或一列全为nan才删除该行或列
		2.填充数据:
			t.fillna(t.mean()) - 将所有为NaN的数据填充为均值或者中值
			t["z"] = t["z"].fillna(t["z"].mean()) - 对某一列进行填充
	处理0的方式:
		若0为实验的数据,则不进行处理
		若0是缺失值,则将0所在位置赋值为nan

pandas之DataFrame常用的统计方法:
	1.求平均数: df.mean() or df["某列索引"].mean()
	2.转化成列表: df["某列索引"].str.split(",").tolist() or df["某列索引"].unique()
	3.最值:		
		df.max() or df["某列索引"].max()
		df.min() or df["某列索引"].min()
	4.获取最值所在位置:
		df.argmax() or df["某列索引"].argmax()
		df.argmin() or df["某列索引"].argmin()	
	5.中值:
		df.median()

pandas字符串的离散化:
	方法: 重新构造一个全0的数组,列名为分类,如果某一条数据中分类出现过,就让0变为1
	具体核心操作: 
		# 统计分类列表
		temp_list = df["Genre"].str.split(",").tolist()  # [[],[],[],....]
		genre_list = list(set([i for j in temp_list for i in j]))  # set()函数用于去重

		# 构造全为0的数组
		zeros_df = pd.DataFrame(np.zeros((df.shape[0], len(genre_list))), columns=genre_list)
		# print(zeros_df)

		# 给每个电影出现的位置赋值1
		for i in range(df.shape[0]):
   			# zeros_df[0,["Sci-fi","Mucical"]] =1
    			zeros_df.loc[i, temp_list[i]] = 1

pandas数据合并:
	行合并join:
		join默认情况下把行索引相同的数据合并到一起

	列合并merge:
		merge按照指定的列把数据按照一定的方式合并到一起
		1.默认合并方式:inner,交集
		2.outer,并集,NaN补全
		3.left,左边为准,NaN补全
		4.right,右边为准,NaN补全

pandas数据的分组和聚合:
        分组: 
		df.groupby(by) - 按照某一列进行分组,DataFrameGroupBy为分组后的数据元组
		df.groupby(by=["Country","Province"]).count() - 进行多组分组,DataFrame则可以不要加df
		df.groupby(by=[df["Country"] ,df["Province"]]).count() - 若为Series则需要加df
              	df.groupby(by=[df["Country"] ,df["Province"]])["Country"].count() - 获取分组后某一部分数据
        	df["Country"].groupby(by=[df["Country"] ,df["Province"]]).count() - 对某几列数组进行分组

	聚合: 通过分组后的数据元组进行聚合操作,如统计数量,平均值等
	
	常见的聚合方法:
		count - 分组中非NaN值的数量
		sum - 非NaN值的和
		mean - 非NaN值的平均值
		meidan - 非NaN值的算术中位数
		std,var - 无偏(分母为n-1)标准差和方差
		min,max - 非NaN的最值

pandas索引相关知识:
	索引的属性和方法:
		获取索引: df.index
		指定index: df.index = ['x', 'y']
		重新设置: df.reindex(list("abcdef"))
		指定某一列作为索引: df.set_index("Country", drop=Flase)
		返回index的唯一值: df.set_index("Country").index.unique()

